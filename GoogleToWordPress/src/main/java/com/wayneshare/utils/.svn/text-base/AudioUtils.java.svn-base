package rb.sh.utils;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.Line;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.UnsupportedAudioFileException;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import rb.sh.common.CommonConst;
import rb.sh.test.session.audioset.HrlUtils;
import rb.sh.test.session.audioset.RawAudioFile;
import rb.sh.testlog.analyzer.LogUtils;

public class AudioUtils {

	public static final Logger LOG = LoggerFactory.getLogger(AudioUtils.class);

	// size of the byte buffer used to read/write the audio stream
	private static final int BUFFER_SIZE = 4096;

	public static void main(String[] args) {

		// test to play a wav as a raw file
		// String fileFullName =
		// "/home/xiaowei/mywork/javaworkspace/SmartHomeTest/testdata/testAudio/MyAudioSet/Raw_1_wav.wav";
		String fileFullName = "/home/xiaowei/mywork/javaworkspace/SmartHomeTest/testdata/testAudio/M05_r1_1m_13.wav";
		String targetFolder = "/home/xiaowei/mywork/javaworkspace/SmartHomeTest/testdata/testAudio/";

		convertWAVToRawFile(new File(fileFullName), new File(targetFolder));

		return;
	}

	/**
	 * play a raw file by convert file to a AudioInputStream
	 * 
	 * @param inputFileFullName
	 */
	public static void playRawPCMFile(String inputFileFullName) {

		File inputFile = new File(inputFileFullName);
		InputStream inputStream = null;
		try {
			inputStream = new FileInputStream(inputFile);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		inputStream = new BufferedInputStream(inputStream);
		AudioFormat format = getBLSAudioFormat();
		long lLengthInFrames = inputFile.length() / format.getFrameSize();
		// read in the audio according format
		AudioInputStream ais = new AudioInputStream(inputStream, format,
				lLengthInFrames);
		// play
		playStream(ais);
	}

	/**
	 * directly play a wav file
	 * 
	 * @param fileFullName
	 */
	public static void playWAV(String fileFullName) {

		File audioFile = FileFolderUtils.getFile(fileFullName);
		if (audioFile != null) {
			AudioInputStream audioStream;
			try {
				audioStream = AudioSystem.getAudioInputStream(audioFile);
				playStream(audioStream);
			} catch (UnsupportedAudioFileException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		} else {
			LOG.warn("Audio file not found : " + fileFullName);
		}
		return;
	}

	/**
	 * clip method easy to cause the out of heap memory issue
	 * 
	 * @param file
	 */
	private static void play(File file) {
		try {
			final Clip clip = (Clip) AudioSystem.getLine(new Line.Info(
					Clip.class));

			clip.addLineListener(new LineListener() {
				@Override
				public void update(LineEvent event) {
					if (event.getType() == LineEvent.Type.STOP)
						clip.close();
				}
			});

			clip.open(AudioSystem.getAudioInputStream(file));
			clip.start();
		} catch (Exception exc) {
			exc.printStackTrace();
		}
	}

	private static void playStream(AudioInputStream audioStream) {

		try {

			AudioFormat format = audioStream.getFormat();

			DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);

			SourceDataLine audioLine = (SourceDataLine) AudioSystem
					.getLine(info);

			audioLine.open(format);

			audioLine.start();

			byte[] bytesBuffer = new byte[BUFFER_SIZE];
			int bytesRead = -1;

			while ((bytesRead = audioStream.read(bytesBuffer)) != -1) {
				audioLine.write(bytesBuffer, 0, bytesRead);
			}

			audioLine.drain();
			audioLine.close();
			audioStream.close();

		} catch (LineUnavailableException ex) {
			LOG.error("Audio line for playing back is unavailable.");
			ex.printStackTrace();
		} catch (IOException ex) {
			LOG.error("Error playing the audio file.");
			ex.printStackTrace();
		}
	}

	public static AudioFormat getBLSAudioFormat() {
		boolean bSigned = true;
		boolean bBigEndian = false;
		// the size of one (mono) sample in bits.
		// This is typical 8, 16, 24 or 32.
		int nSampleSizeInBits = 16;
		// the number of channels
		int nChannels = 1;
		// the sample rate of the input date
		float fSampleRate = 16000;

		AudioFormat format = new AudioFormat(fSampleRate, nSampleSizeInBits,
				nChannels, bSigned, bBigEndian);
		return format;
	}

	/**
	 * load a audio obj
	 * 
	 * @param fullPathName
	 * @param fileName
	 * @param hrlFileName
	 * @return
	 */
	public static RawAudioFile createAudioFileObj(String fullPathName,
			String fileName, String hrlFileName) {
		RawAudioFile rt = new RawAudioFile();
		rt.setAudioFilePath(fullPathName);
		rt.setAudioFileName(fileName);

		if (StringUtils.isNotBlank(hrlFileName)) {
			rt.setAudioText(HrlUtils.readAudioText(fullPathName, hrlFileName,
					fileName));
		}
		return rt;
	}

	/**
	 * convert to from Raw file to a wav file by add wav header
	 * 
	 * @param inputFileFullName
	 * @param outputFileFullName
	 */
	public static void convertRawToWavFile(String inputFileFullName,
			String outputFileFullName) {

		File inputFile = new File(inputFileFullName);
		InputStream inputStream = null;
		try {
			inputStream = new FileInputStream(inputFile);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		inputStream = new BufferedInputStream(inputStream);
		AudioFormat format = getBLSAudioFormat();
		long lLengthInFrames = inputFile.length() / format.getFrameSize();
		// read in the audio according format
		AudioInputStream ais = new AudioInputStream(inputStream, format,
				lLengthInFrames);

		// playStream(ais);

		int nWrittenBytes = 0;
		try {
			File outputFile = new File(outputFileFullName);
			AudioFileFormat.Type targetFileType = AudioFileFormat.Type.WAVE;
			nWrittenBytes = AudioSystem.write(ais, targetFileType, outputFile);

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
	 * strip header of wav and save as a hcm file
	 * 
	 * @param audioFile
	 * @param outputFolder
	 */
	public static void convertWAVToRawFile(File audioFile, File outputFolder) {

		AudioInputStream audioStream = null;
		try {
			audioStream = AudioSystem.getAudioInputStream(audioFile);
			// playStream(audioStream);
			// save this stream to a raw file
			String rawFileFullName = outputFolder.getAbsolutePath()
					+ CommonConst.S_Slash
					+ LogUtils.getRawNameFromWavName(audioFile.getName());
			OutputStream out = new FileOutputStream(new File(rawFileFullName));
			IOUtils.copy(audioStream, out);
			audioStream.close();
			out.close();

			// the play with our code from raw file
			playRawPCMFile(rawFileFullName);

		} catch (UnsupportedAudioFileException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

		}
	}

	/**
	 * Strip WAV and copy its raw data to binary []
	 * 
	 * @param audioFile
	 * @return
	 */

	public static byte[] convertWAVToRawBin(File audioFile) {
		byte[] bytes = null;
		AudioInputStream audioStream;
		try {
			audioStream = AudioSystem.getAudioInputStream(audioFile);
			bytes = IOUtils.toByteArray(audioStream);
		} catch (UnsupportedAudioFileException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
		}
		return bytes;
	}

}
